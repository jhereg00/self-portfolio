{"version":3,"sources":["../../node_modules/browser-pack/_prelude.js","data/classConfigs.ts","scripts.ts","ui/AnimatingCanvasAbstract.ts","ui/ClassCard.ts","ui/ClassCardFrameCanvas.ts","ui/ClassSelectScreen.ts","ui/CloudedCanvas.ts","utils/AnimatedValue.ts","utils/createElement.ts","utils/deepExtend.ts","utils/easing/CubicBezier.ts","utils/tileCanvasImage.ts"],"names":[],"mappings":"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","file":"scripts.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","export default [\r\n    {\r\n        name: 'Soldier',\r\n        portraitUrl: 'images/class-select-portrait-soldier.png',\r\n        items: ['Badass Rifle', 'Potent AF Potion']\r\n    },\r\n    {\r\n        name: 'Explorer',\r\n        portraitUrl: 'images/class-select-portrait-explorer.png',\r\n        items: ['Hunting Axe', 'Monocular']\r\n    },\r\n    {\r\n        name: 'Adventurer',\r\n        portraitUrl: 'images/class-select-portrait-adventurer.png',\r\n        items: ['Wooden Club', 'Advanced Map']\r\n    },\r\n    {\r\n        name: 'Expatriate',\r\n        portraitUrl: 'images/class-select-portrait-expatriate.png',\r\n        items: ['Silver Sword', 'Strength Potion']\r\n    },\r\n    {\r\n        name: 'Stowaway',\r\n        portraitUrl: 'images/class-select-portrait-stowaway.png',\r\n        items: ['Rogue\\'s Knife', 'Cooked Steak']\r\n    }\r\n]","/**\r\n *  scripts.js\r\n *  This should include objects, which in turn include the lib files they need.\r\n *  This keeps us using a modular approach to dev while also only including the\r\n *  parts of the library we need.\r\n */\r\nimport ClassSelectScreen from './ui/ClassSelectScreen';\r\nimport classConfigs from './data/classConfigs';\r\n\r\nconst classSelectScreenEl = document.getElementById('classSelectScreen');\r\nconst classSelectScreen = new ClassSelectScreen(classSelectScreenEl, classConfigs);\r\nclassSelectScreen.show();","import createElement from '../utils/createElement';\r\n\r\nclass AnimatingCanvasAbstract {\r\n    public canvas: HTMLCanvasElement;\r\n    public ctx: CanvasRenderingContext2D;\r\n    private running: boolean;\r\n    private animStartTime: number;\r\n\r\n    constructor() {\r\n        this._initCanvas();\r\n    }\r\n    \r\n    _initCanvas() {\r\n        this.canvas = <HTMLCanvasElement>createElement('canvas');\r\n        this.ctx = this.canvas.getContext('2d');\r\n    }\r\n\r\n    draw(time) {}\r\n    \r\n    clear() {\r\n        this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);\r\n    }\r\n\r\n    start() {\r\n        if (this.running) {\r\n            return;\r\n        }\r\n\r\n        this.running = true;\r\n        this.animStartTime = new Date().getTime();\r\n        // bind to `this` so we can reuse it in other scopes, like the window's requestAnimationFrame\r\n        this.loop = this.loop.bind(this);\r\n        this.loop();\r\n    }\r\n\r\n    stop() {\r\n        this.running = false;\r\n    }\r\n\r\n    loop() {\r\n        if (this.running) {\r\n            this.draw(new Date().getTime() - this.animStartTime);\r\n            requestAnimationFrame(this.loop);\r\n        }\r\n    }\r\n}\r\n\r\nexport default AnimatingCanvasAbstract;","import createElement from '../utils/createElement';\r\nimport CloudedCanvas from './CloudedCanvas';\r\nimport ClassCardFrameCanvas from './ClassCardFrameCanvas';\r\n\r\ninterface IClassCardConfig {\r\n    portraitUrl: string,\r\n    name: string,\r\n    items: string[],\r\n    shifted?: boolean,\r\n}\r\n\r\nconst ITEM_COUNT = 2;\r\nconst MISSING_ITEM_MSG = 'Nothing.<br>Absolutely Nothing';\r\nconst FLICKER_MIN_DELAY = 200;\r\nconst FLICKER_MAX_DELAY = 1000;\r\nconst FLICKER_RETURN_DELAY = 160;\r\nconst FLICKER_NO_TRIPLE_THRESHOLD = 400;\r\nconst ACTIVE_CANVAS_IMAGE = 'images/class-select-frame-active-extras.png';\r\nconst ACTIVE_CANVAS_STOP_DELAY = 500;\r\n\r\nclass ClassCard {\r\n    public element: HTMLElement;\r\n\r\n    private config: IClassCardConfig;\r\n    private htmlElements;\r\n    private shiftUnshiftTimeout;\r\n    private flickerTimeout;\r\n    private lastFlickerDelay;\r\n    private cloudedCanvas: CloudedCanvas;\r\n    private frame: ClassCardFrameCanvas;\r\n    private hovered: boolean;\r\n    private active: boolean;\r\n    private frameShowing: boolean;\r\n\r\n    constructor(options: IClassCardConfig) {\r\n        this.config = options;\r\n        this._buildElement();\r\n\r\n        // temp\r\n        this.element.addEventListener('click', () => {\r\n            this.setActive();\r\n        });\r\n        this.element.addEventListener('mouseenter', () => {\r\n            this.hovered = true;\r\n            this.highlight();\r\n        });\r\n        this.element.addEventListener('mouseleave', () => {\r\n            this.hovered = false;\r\n            this.unhighlight();\r\n        })\r\n    }\r\n\r\n    _buildElement() {\r\n        this.htmlElements = {\r\n            main: createElement('a', { className: 'class-card' + (this.config.shifted ? ' is-shifted' : '') }),\r\n            portraitBox: createElement('div', { className: 'class-card__portrait-box' }),\r\n            portrait: createElement('img', {\r\n                className: 'class-card__portrait',\r\n                src: this.config.portraitUrl\r\n            }),\r\n            name: createElement('div', { className: 'class-card__name' }),\r\n            nameSpan: createElement('span', { innerHTML: this.config.name }),\r\n            items: []\r\n        }\r\n\r\n        this.element = this.htmlElements.main;\r\n        // slap in greebles first\r\n        this.element.appendChild(createElement('img', { className: 'class-card__greeble class-card__greeble--tr', src: 'images/greeble-tr.png' }));\r\n        this.element.appendChild(createElement('img', { className: 'class-card__greeble class-card__greeble--bl1', src: 'images/greeble-bl.png' }));\r\n        this.element.appendChild(createElement('img', { className: 'class-card__greeble class-card__greeble--bl2', src: 'images/greeble-bl2.png' }));\r\n\r\n        this.element.appendChild(this.htmlElements.portraitBox);\r\n        this.htmlElements.portraitBox.appendChild(this.htmlElements.portrait);\r\n        this.element.appendChild(this.htmlElements.name);\r\n        this.htmlElements.name.appendChild(this.htmlElements.nameSpan);\r\n\r\n        // create the right number of items, regardless how many we're given\r\n        for (let i = 0; i < ITEM_COUNT; i++) {\r\n            const itemEl = createElement('div', { className: 'class-card__item' });\r\n            itemEl.appendChild(createElement('span', { innerHTML: this.config.items[i] || MISSING_ITEM_MSG }));\r\n            this.htmlElements.items.push(itemEl);\r\n            this.element.appendChild(itemEl);\r\n        }\r\n\r\n        // create the frame that highlights\r\n        this.frame = new ClassCardFrameCanvas();\r\n        this.element.appendChild(this.frame.canvas);\r\n    }\r\n\r\n    _clearShiftUnshiftTimeout() {\r\n        if (this.shiftUnshiftTimeout) {\r\n            window.clearTimeout(this.shiftUnshiftTimeout);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Shift the card out of its normal space.\r\n     *\r\n     * @param {number} [delay=0] - delay before shifting in ms\r\n     * @memberof ClassCard\r\n     */\r\n    shift(delay = 0) {\r\n        this._clearShiftUnshiftTimeout();\r\n\r\n        if (delay > 0) {\r\n            this.shiftUnshiftTimeout = window.setTimeout(() => {\r\n                this.element.classList.add('is-shifted');\r\n            }, delay);\r\n        } else {\r\n            this.element.classList.add('is-shifted');\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Return a shifted card back to its normal space.\r\n     *\r\n     * @param {number} [delay=0] - delay before unshifting in ms\r\n     * @memberof ClassCard\r\n     */\r\n    unshift(delay = 0) {\r\n        this._clearShiftUnshiftTimeout();\r\n\r\n        if (delay > 0) {\r\n            this.shiftUnshiftTimeout = window.setTimeout(() => {\r\n                this.element.classList.remove('is-shifted');\r\n            }, delay);\r\n        } else {\r\n            this.element.classList.remove('is-shifted');\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Show the bright frame to indicate hover or active.\r\n     *\r\n     * @returns\r\n     * @memberof ClassCard\r\n     */\r\n    highlight() {\r\n        if (this.frameShowing) {\r\n            return;\r\n        }\r\n\r\n        this.frame.canvas.style.transition = 'none';\r\n        this.frame.canvas.style.opacity = '1';\r\n        this.frame.start();\r\n        this.frameShowing = true;\r\n        // re-enable transitions on next frame\r\n        requestAnimationFrame(() => {\r\n            this.frame.canvas.style.transition = '';\r\n        });\r\n    }\r\n    /**\r\n     * Hide the bright frame.\r\n     *\r\n     * @returns\r\n     * @memberof ClassCard\r\n     */\r\n    unhighlight() {\r\n        if (this.hovered || this.active) {\r\n            return;\r\n        }\r\n\r\n        this.frame.canvas.style.opacity = '0';\r\n        this.frameShowing = false;\r\n    }\r\n\r\n    /**\r\n     * Sets the active state, also showing the frame and cloudedCanvas.\r\n     *\r\n     * @memberof ClassCard\r\n     */\r\n    setActive() {\r\n        // if we don't have a clouded canvas, make one now\r\n        if (!this.cloudedCanvas) {\r\n            this.cloudedCanvas = new CloudedCanvas({\r\n                imagePath: ACTIVE_CANVAS_IMAGE,\r\n                cloudSpeed: {\r\n                    x: 100,\r\n                    y: 100,\r\n                }\r\n            });\r\n            this.element.appendChild(this.cloudedCanvas.canvas);\r\n        }\r\n\r\n        this.element.classList.add('is-active');\r\n        this.cloudedCanvas.start();\r\n        this.active = true;\r\n        this.highlight();\r\n    }\r\n\r\n    /**\r\n     * Takes the card out of the active state. Also unhighlights if not hovered.\r\n     *\r\n     * @memberof ClassCard\r\n     */\r\n    setInactive() {\r\n        this.element.classList.remove('is-active');\r\n        this.active = false;\r\n        if (this.cloudedCanvas) {\r\n            window.setTimeout(() => {\r\n                this.cloudedCanvas.stop();\r\n                this.cloudedCanvas.clear();\r\n            }, ACTIVE_CANVAS_STOP_DELAY);\r\n        }\r\n        this.unhighlight();\r\n    }\r\n}\r\n\r\nexport default ClassCard;\r\nexport { IClassCardConfig };","import AnimatedValue from \"../utils/AnimatedValue\";\r\nimport CubicBezier from '../utils/easing/CubicBezier';\r\nimport AnimatingCanvasAbstract from \"./AnimatingCanvasAbstract\";\r\n\r\nconst REAL_TIME_PER_KEYFRAME_TIME = 33;\r\n\r\n// set up global frame image\r\nlet frameImageLoaded = false;\r\nconst FRAME_IMAGE = new Image();\r\nFRAME_IMAGE.addEventListener('load', () => {\r\n    frameImageLoaded = true;\r\n});\r\nFRAME_IMAGE.src = 'images/class-select-frame.png';\r\n\r\nconst EASE_OUT_BEZIER = new CubicBezier(.07, .24, .25, .98);\r\nconst EASE_OUT_BEZIER_SUBTLE = new CubicBezier(.14, .27, .57, .97);\r\nconst EASE_IN_OUT_BEZIER = new CubicBezier(.49, .12, .45, .98);\r\nconst LAST_KF_TIME = 14;\r\nconst SHAPES = [\r\n    {\r\n        // top bar\r\n        type: 'rectangle',\r\n        x: 0,\r\n        y: 0,\r\n        w: new AnimatedValue([\r\n            { time: 0, value: 0, ease: EASE_OUT_BEZIER.ease },\r\n            { time: 9, value: 346 },\r\n        ]),\r\n        h: 22\r\n    },\r\n    {\r\n        // left side\r\n        type: 'rectangle',\r\n        x: 0,\r\n        y: 0,\r\n        w: 28,\r\n        h: new AnimatedValue([\r\n            { time: 0, value: 0, ease: EASE_OUT_BEZIER.ease },\r\n            { time: 5, value: 732 }\r\n        ])\r\n    },\r\n    {\r\n        // above name\r\n        type: 'rectangle',\r\n        x: 0,\r\n        y: 550,\r\n        w: new AnimatedValue([\r\n            { time: 1, value: 0, ease: EASE_OUT_BEZIER_SUBTLE.ease },\r\n            { time: 9, value: 564 }\r\n        ]),\r\n        h: 27\r\n    },\r\n    {\r\n        // right side\r\n        type: 'rectangle',\r\n        x: 317,\r\n        y: new AnimatedValue([\r\n            { time: 0, value: 732, ease: EASE_IN_OUT_BEZIER.ease },\r\n            { time: 12, value: 0 }\r\n        ]),\r\n        w: 40,\r\n        h: 740,\r\n    },\r\n    {\r\n        // below name\r\n        type: 'rectangle',\r\n        x: 0,\r\n        y: 624,\r\n        w: new AnimatedValue([\r\n            { time: 2, value: 0, ease: EASE_OUT_BEZIER_SUBTLE.ease },\r\n            { time: 12, value: 564 }\r\n        ]),\r\n        h: 11,\r\n    },\r\n    {\r\n        // between items\r\n        type: 'rectangle',\r\n        x: 0,\r\n        y: 673,\r\n        w: new AnimatedValue([\r\n            { time: 2, value: 0, ease: EASE_OUT_BEZIER_SUBTLE.ease },\r\n            { time: 14, value: 564 }\r\n        ]),\r\n        h: 4,\r\n    },\r\n    {\r\n        // bottom\r\n        type: 'rectangle',\r\n        x: 0,\r\n        y: 713,\r\n        w: new AnimatedValue([\r\n            { time: 1, value: 0, ease: EASE_IN_OUT_BEZIER.ease },\r\n            { time: 13, value: 564 }\r\n        ]),\r\n        h: 50, // overkill to make sure bottom is filled\r\n    }\r\n]\r\n\r\nclass ClassCardFrameCanvas extends AnimatingCanvasAbstract {\r\n    public canvas: HTMLCanvasElement;\r\n    public ctx: CanvasRenderingContext2D;\r\n\r\n    private offscreenCanvas: HTMLCanvasElement;\r\n    private octx: CanvasRenderingContext2D;\r\n    \r\n    constructor() {\r\n        super();\r\n\r\n        this.offscreenCanvas = document.createElement('canvas');\r\n        this.octx = this.offscreenCanvas.getContext('2d');\r\n\r\n        this.canvas.classList.add('class-card__frame-canvas');\r\n        FRAME_IMAGE.addEventListener('load', () => {\r\n            this._sizeCanvas();\r\n        });\r\n    }\r\n\r\n    _sizeCanvas() {\r\n        const canWidth = FRAME_IMAGE.width;\r\n        const canHeight = FRAME_IMAGE.height;\r\n\r\n        this.canvas.width = canWidth;\r\n        this.canvas.height = canHeight;\r\n        this.offscreenCanvas.width = canWidth;\r\n        this.offscreenCanvas.height = canHeight;\r\n    }\r\n\r\n    draw(time) {\r\n        const kfTime = time / REAL_TIME_PER_KEYFRAME_TIME;\r\n        this.octx.clearRect(0, 0, this.offscreenCanvas.width, this.offscreenCanvas.height);\r\n        this.octx.fillStyle = '#FFFFFF';\r\n        SHAPES.forEach((shape) => {\r\n            if (shape.type === 'rectangle') {\r\n                this.octx.fillRect(\r\n                    getRealValue(shape.x, kfTime),\r\n                    getRealValue(shape.y, kfTime),\r\n                    getRealValue(shape.w, kfTime),\r\n                    getRealValue(shape.h, kfTime),\r\n                )\r\n            }\r\n        });\r\n\r\n        this.clear();\r\n        this.ctx.save();\r\n        this.ctx.drawImage(FRAME_IMAGE, 0, 0);\r\n        this.ctx.globalCompositeOperation = 'source-in';\r\n        this.ctx.drawImage(this.offscreenCanvas, 0, 0);\r\n        this.ctx.restore();\r\n\r\n        // save redraws\r\n        if (kfTime > LAST_KF_TIME) {\r\n            this.stop();\r\n        }\r\n    }\r\n}\r\n\r\n// quick helper\r\nfunction getRealValue(baseValue, time) {\r\n    if (baseValue instanceof AnimatedValue) {\r\n        return baseValue.getAtTime(time);\r\n    } else {\r\n        return baseValue;\r\n    }\r\n}\r\n\r\nexport default ClassCardFrameCanvas;","import { IClassCardConfig } from './ClassCard';\r\nimport ClassCard from './ClassCard';\r\n\r\nconst UNSHIFT_STAGGER_TIME = 33;\r\n\r\n// this is super minimal\r\n// using mostly as a controller for now\r\nclass ClassSelectScreen {\r\n    private activeIndex: number;\r\n    private classCards: ClassCard[];\r\n    public element: HTMLElement;\r\n\r\n    constructor(element: HTMLElement, classConfigs: IClassCardConfig[]) {\r\n        this.classCards = [];\r\n        classConfigs.forEach((c, index) => {\r\n            const card = new ClassCard(c);\r\n            card.shift();\r\n            this.classCards.push(card);\r\n            element.appendChild(card.element);\r\n            card.element.addEventListener('click', () => {\r\n                this.setActiveClass(index);\r\n            });\r\n        });\r\n\r\n        this.element = element;\r\n    }\r\n\r\n    setActiveClass(index) {\r\n        if (this.activeIndex === index) {\r\n            return;\r\n        }\r\n        \r\n        // clear current\r\n        if (this.activeIndex !== undefined) {\r\n            this.classCards[this.activeIndex].setInactive();\r\n        }\r\n        // set new\r\n        if (this.classCards[index]) {\r\n            this.classCards[index].setActive();\r\n            this.activeIndex = index;\r\n        }\r\n    }\r\n\r\n    show() {\r\n        this.element.classList.remove('is-hidden');\r\n        this.classCards.forEach((c, index) => {\r\n            c.unshift(index * UNSHIFT_STAGGER_TIME);\r\n        });\r\n    }\r\n}\r\n\r\nexport default ClassSelectScreen;","import deepExtend from '../utils/deepExtend';\r\nimport tileCanvasImage from '../utils/tileCanvasImage';\r\nimport AnimatingCanvasAbstract from './AnimatingCanvasAbstract';\r\n\r\n// set up global cloud image\r\nlet cloudImageLoaded = false;\r\nconst CLOUD_IMAGE = new Image();\r\nCLOUD_IMAGE.addEventListener('load', () => {\r\n    cloudImageLoaded = true;\r\n});\r\nCLOUD_IMAGE.src = 'images/clouds.png';\r\n\r\ninterface ICloudedCanvasConfig {\r\n    imagePath: string,\r\n    width?: number,\r\n    height?: number,\r\n    cloudSpeed?: {\r\n        x: number,\r\n        y: number,\r\n    }\r\n}\r\nconst DEFAULTS = {\r\n    imagePath: '',\r\n    cloudSpeed: {\r\n        x: 100,\r\n        y: 100,\r\n    }\r\n}\r\n\r\nclass CloudedCanvas extends AnimatingCanvasAbstract {\r\n    private image: HTMLImageElement;\r\n    private imageLoaded: boolean;\r\n    private config: ICloudedCanvasConfig;\r\n\r\n    constructor(options: ICloudedCanvasConfig) {\r\n        super();\r\n\r\n        this.config = <ICloudedCanvasConfig>deepExtend({}, DEFAULTS, options);\r\n\r\n        this._initImage();\r\n        this._sizeCanvas();\r\n        this.canvas.classList.add('clouded-canvas');\r\n    }\r\n\r\n    _initImage() {\r\n        this.image = new Image();\r\n        this.imageLoaded = false;\r\n        this.image.addEventListener('load', () => {\r\n            this.imageLoaded = true;\r\n            this._sizeCanvas();\r\n        });\r\n        this.image.src = this.config.imagePath;\r\n    }\r\n\r\n    _sizeCanvas() {\r\n        if (!this.config && !this.image) {\r\n            // not ready\r\n            return;\r\n        }\r\n\r\n        const canWidth = this.config && this.config.width || this.image.width;\r\n        const canHeight = this.config && this.config.height || this.image.height;\r\n\r\n        this.canvas.width = canWidth;\r\n        this.canvas.height = canHeight;\r\n    }\r\n\r\n    draw(time: number = 0) {\r\n        if (!this.imageLoaded || !cloudImageLoaded) {\r\n            // if we don't have the images, fail\r\n            return;\r\n        }\r\n\r\n        const timeInS = time / 1000;\r\n\r\n        this.clear();\r\n        // save context state\r\n        this.ctx.save();\r\n        // draw the clouds, tiled\r\n        tileCanvasImage(this.canvas, CLOUD_IMAGE, this.config.cloudSpeed.x * timeInS, this.config.cloudSpeed.y * timeInS);\r\n        // change mode to draw within destination\r\n        this.ctx.globalCompositeOperation = 'source-in';\r\n        // draw the real image\r\n        this.ctx.drawImage(this.image, 0, 0);\r\n        // return to last state\r\n        this.ctx.restore();\r\n    }\r\n}\r\n\r\nexport default CloudedCanvas;","interface IKeyframe {\r\n    time: number,\r\n    value: number,\r\n    ease?: (start: number, change: number, percentage: number) => number\r\n}\r\n\r\nclass AnimatedValue {\r\n    private keyframes: IKeyframe[];\r\n    private length: number;\r\n    private startBound: boolean;\r\n    private endBound: boolean;\r\n\r\n    constructor (keyframes: IKeyframe[], startBound: boolean = true, endBound: boolean = true) {\r\n        this.keyframes = keyframes;\r\n        this.length = keyframes[keyframes.length - 1].time;\r\n        this.startBound = startBound;\r\n        this.endBound = endBound;\r\n    }\r\n\r\n    getAtTime (time) {\r\n        // handle before if startBound and after if endBound\r\n        if (this.startBound && this.keyframes[0].time >= time) {\r\n            return this.keyframes[0].value;\r\n        } else if (this.endBound && this.keyframes[this.keyframes.length - 1].time <= time) {\r\n            return this.keyframes[this.keyframes.length - 1].value;\r\n        }\r\n\r\n        // time for maths\r\n        // kf measures the 'to' frame, so start at 1 instead of 0\r\n        let kf = 1;\r\n        // for loop that doesn't really do anything inside the loop. Just iterates until the condition is true\r\n        for (; kf < this.keyframes.length - 1 && time > this.keyframes[kf].time; kf++);\r\n        // determine easing method\r\n        if (typeof this.keyframes[kf - 1].ease === 'function') {\r\n            return this.keyframes[kf - 1].ease(\r\n                this.keyframes[kf - 1].value,\r\n                this.keyframes[kf].value - this.keyframes[kf - 1].value,\r\n                (time - this.keyframes[kf - 1].time) / (this.keyframes[kf].time - this.keyframes[kf - 1].time)\r\n            );\r\n        } else {\r\n            // no passed easing method, so linear it is\r\n            return (this.keyframes[kf - 1].value + (this.keyframes[kf].value - this.keyframes[kf - 1].value) * (time - this.keyframes[kf - 1].time) / (this.keyframes[kf].time - this.keyframes[kf - 1].time));\r\n        }\r\n    }\r\n}\r\n\r\nexport default AnimatedValue;","import deepExtend from '../utils/deepExtend';\r\n\r\n/**\r\n * Creates an element with the given properties.\r\n *\r\n * @export\r\n * @param {string} tagName\r\n * @param {object} [props={}]\r\n * @returns\r\n */\r\nexport default function createElement(tagName: string, props: object = {}): HTMLElement {\r\n    const el = document.createElement(tagName);\r\n    deepExtend(el, props);\r\n    return el;\r\n}","/**\r\n * Deeply extends an object with another. The first object is mutated.\r\n *\r\n * @param {Object} obj1\r\n * @param {Object} obj2\r\n * @returns\r\n */\r\nfunction deepExtendObject (obj1: object, obj2: object) {\r\n    for (let prop in obj2) {\r\n        if (typeof obj2[prop] === 'object') {\r\n            if (typeof obj1[prop] !== 'object') {\r\n                obj1[prop] = {};\r\n            }\r\n            // recursively apply object\r\n            deepExtend(obj1[prop], obj2[prop]);\r\n        } else {\r\n            obj1[prop] = obj2[prop];\r\n        }\r\n    }\r\n\r\n    return obj1;\r\n}\r\n\r\n/**\r\n * Deeply extends an object with a number of other objects.\r\n *\r\n * @export\r\n * @param {object} obj1\r\n * @param {object[]} additionalObjects\r\n * @returns\r\n */\r\nexport default function deepExtend (obj1: object, ...additionalObjects: object[]) {\r\n    additionalObjects.forEach((o) => {\r\n        deepExtendObject(obj1, o);\r\n    });\r\n    return obj1;\r\n}","class CubicBezier {\r\n    private points: number[];\r\n\r\n    constructor (x1: number, y1: number, x2: number, y2: number) {\r\n        this.points = [0, 0, x1, y1, x2, y2, 1, 1];\r\n        this.ease = this.ease.bind(this);\r\n    }\r\n\r\n    // this was mostly ripped/ported to ES6 from a method I figured out years ago. I don't remember how it actually works.\r\n    ease (start: number, change: number, percentage: number) {\r\n        // first, figure out y percentage - which we use for the output - from x percentage - which is the input\r\n        let possibleResults = [];\r\n\r\n        // let's find `t` where:\r\n        // x = (1-t)^3 * X0 + 3*(1-t)^2 * t * X1 + 3*(1-t) * t^2 * X2 + t^3 * X3\r\n        // thus a series of formulas can be used to derive `t` by solving a cubic equation\r\n        //\r\n        // some of this hurts my brain, but these were derived from:\r\n        //   simplify the cubic equation:\r\n        //     t^3(X0 + 3X1 - 3X2 + X3) + 3*t^2*(X0 - 2X1 + X2) + 3 * t * (X1 - X0) + X0 - x\r\n        //     use the formulas:\r\n        //       t = u - (b / (3a))\r\n        //       u^3 + pu + q = 0\r\n        //       p = (3ac - b^2) / 3a^2\r\n        //       q = (2b^3 - 9abc + 27a^2d) / 27a^3\r\n        //\r\n        //     see: https://en.wikipedia.org/wiki/Cubic_function\r\n        let a = (this.points[0] + 3 * this.points[2] - 3 * this.points[4] + this.points[6]);\r\n        let b = 3 * (this.points[0] - 2 * this.points[2] + this.points[4]);\r\n        let c = 3 * (this.points[2] - this.points[0]);\r\n        let d = -percentage;\r\n        let discriminant;\r\n\r\n        if (!a) {\r\n            // quadratic formula\r\n            discriminant = c * c - 4 * b * d;\r\n            if (discriminant >= 0) {\r\n                possibleResults = [\r\n                    (-b + Math.sqrt(discriminant)) / (2 * b),\r\n                    (-b - Math.sqrt(discriminant)) / (2 * b)\r\n                ]\r\n            }\r\n        } else {\r\n            // cubic\r\n            // start by normalizing the equation\r\n            b /= a;\r\n            c /= a;\r\n            d /= a;\r\n\r\n            const p = (3 * c - b * b) / 3;\r\n            const q = (2 * b * b * b - 9 * b * c + 27 * d) / 27;\r\n\r\n            if (p === 0) {\r\n                // cube root\r\n                possibleResults = [Math.pow(-q, 1 / 3)];\r\n            } else if (q === 0) {\r\n                possibleResults = [\r\n                    Math.sqrt(-p),\r\n                    -Math.sqrt(p)\r\n                ];\r\n            } else {\r\n                discriminant = Math.pow(q / 2, 2) + Math.pow(p / 3, 3);\r\n                if (discriminant === 0) {\r\n                    possibleResults = [Math.pow(q / 2, 1 / 3) - b / 3];\r\n                } else if (discriminant > 0) {\r\n                    possibleResults = [\r\n                        Math.pow(-(q / 2) + Math.sqrt(discriminant), 1 / 3) - Math.pow((q / 2) + Math.sqrt(discriminant), 1 / 3) - b / 3\r\n                    ]\r\n                } else {\r\n                    const r = Math.sqrt(Math.pow(-(p / 3), 3));\r\n                    const phi = Math.acos(-(q / (2 * r)));\r\n                    const s = 2 * Math.pow(r, 1 / 3);\r\n\r\n                    possibleResults = [\r\n                        s * Math.cos(phi / 3) - b / 3,\r\n                        s * Math.cos((phi + 2 * Math.PI) / 3) - b / 3,\r\n                        s * Math.cos((phi + 4 * Math.PI) / 3) - b / 3\r\n                    ];\r\n                }\r\n            }\r\n        }\r\n\r\n        let t;\r\n        if (possibleResults.length === 1) {\r\n            t = possibleResults[0];\r\n        } else {\r\n            for (let i = 0, len = possibleResults.length; i < len; i++) {\r\n                if (possibleResults[i] >= 0 && possibleResults[i] <= 1) {\r\n                    t = possibleResults[i];\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        // finally use t to get y\r\n        const y = (1 - t) * (1 - t) * (1 - t) * this.points[1] + 3 * (1 - t) * (1 - t) * t * this.points[3] + 3 * (1 - t) * t * t * this.points[5] + t * t * t * this.points[7];\r\n\r\n        return start + y * change;\r\n    }\r\n}\r\n\r\nexport default CubicBezier;","/**\r\n * Fills an entire canvas with a tiling of a given image.\r\n *\r\n * @export\r\n * @param {HTMLCanvasElement} canvas\r\n * @param {HTMLImageElement} image\r\n * @param {number} baseX\r\n * @param {number} baseY\r\n * @returns\r\n */\r\nexport default function tileCanvasImage (canvas: HTMLCanvasElement, image: HTMLImageElement, baseX: number, baseY: number) {\r\n    if (!image.width || !image.height) {\r\n        // image can't be drawn without a size.\r\n        // probably not loaded\r\n        return;\r\n    }\r\n\r\n    // get the context\r\n    const ctx = canvas.getContext('2d');\r\n\r\n    // find upper-left starting position\r\n    const startX = baseX - (Math.ceil(baseX / image.width) * image.width);\r\n    const startY = baseY - (Math.ceil(baseY / image.height) * image.height);\r\n\r\n    for (let curX = startX; curX < canvas.width; curX += image.width) {\r\n        for (let curY = startY; curY < canvas.height; curY += image.height) {\r\n            ctx.drawImage(image, curX, curY);\r\n        }\r\n    }\r\n}"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}