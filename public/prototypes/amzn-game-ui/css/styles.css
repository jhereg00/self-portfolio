@charset "UTF-8";
/***
 * Utilities
 *
 * Reusable functions, mixins, and helper classes.  Things like colors, vertical rhythm, and the .clear-fix helper are in this group.
 * > This directory of partials is also important because weâ€™ll need to define global classes, mixins and styles that can be used anywhere and at any time.
 * >
 * >\- http://www.smashingmagazine.com/2013/08/other-interface-atomic-design-sass/
 */
/***
 * pxToRem function
 *
 * Converts pixels to REMs so we can keep our units consistent.  Assumes 1rem is
 * 16px (default for most browsers).
 *
 * code:
 *   pxToRem($px[,$baseRem]);
 *
 * @param {number} $px
 * @param {number, optional} $baseRem - pixels to count as one rem. Defaults to 16
 * @returns {rems}
 */
/***
 * pxToEm function
 *
 * Converts pixels to EMs so we can keep our units consistent.  Assumes 1em is
 * 16px, or you can pass a different base.
 *
 * code:
 *   pxToEm($px[,$base]);
 *
 * @param {number} $px
 * @param {number, optional} $base - font-size of parent element, default: 16px
 * @returns {ems}
 */
/***
 * Square Root Function
 *
 * Gets the square root of a number (within a margin of error)
 *
 * Useful for diagonal/Pythagorean stuff.
 *
 * code:
 *   sqrt($num)
 *
 * @param {number} $num - number to get square root of
 * @returns {number}
 */
/***
 * Power / Exponent Function
 *
 * Raises a number to a certain power. Supports integers and .5s as the exponent.
 *
 * Useful for diagonal/Pythagorean stuff.
 *
 * code:
 *   pow($base, $exponent)
 *
 * @param {number} $base
 * @param {number} $exponent
 * @returns {number} $base ^ $exponent
 */
/***
 * Aspect Ratio
 *
 * Gets padding for correct aspect ratio, and sets height to 0.
 *
 * code:
 *   aspectRatio($width, $height)
 *
 * @param {number} $width - comparative width of the ratio. The 'x' in x:y
 * @param {number} $height - comparative height of the ratio. The 'y' in x:y
 */
/***
 * Quantity Query
 *
 * Mixins to allow styles to be set based on at-least, at-most, and exactly `n`
 * number of an element.
 *
 * code:
 *   @include qqAtLeast ($n) {
 *     @content;
 *   }
 *
 *   @include qqAtMost ($n) {
 *     @content;
 *   }
 *
 *   @include qqExactly ($n) {
 *     @content;
 *   }
 *
 * @param {number} $n - how many elements to query against
 * @param @content - the styles to apply to it
 */
/***
 * Media Queries
 *
 * Defines our default breakpoints.  Assumes mobile-first code, but supports not
 * by passing your breakpoint to the alternate mixin: `mq-lt`. Don't worry about
 * having a ton of these, since the minification process will combine them.
 *
 * There's also a separate mixin each for `portrait` and `landscape` orientations.
 *
 * code:
 *   @include mq($breakpoint) {
 *     @content;
 *   }
 *   @include mq-lt($breakpoint) {
 *     @content;
 *   }
 *   @include portrait {
 *     @content;
 *   }
 *   @include landscape {
 *     @content;
 *   }
 *
 * @param {ems} $breakpoint - what size you'd like to target larger than. A few have been pre-defined.
 * @param @content - the content to put in the media query
 */
/***
 * Clear Fix
 *
 * Uses an `::after` pseudo-element to clear any floats inside this element.
 *
 * code:
 *   @include clearFix;
 */
@import url("https://fonts.googleapis.com/css?family=Quattrocento:400,700");
.clear-fix::after {
	content: '';
	display: table;
	clear: both; }

/***
 * Grid
 *
 * Our super simple custom grid system. Just include the mixin `gridContainer`
 * to set max-width = $max-width + $gutter. For internal stuff, use
 * `subgridContainer` to automatically offset the margins on the container if
 * needed, and `colspan` on the actual column.  By default, assumes 12 columns
 * and a 2 * $wr gutter, but those can be overridden for more complex layouts.
 * It spits out styles wherever it is called, so you can define different
 * columns or even entirely different grids within media queries.
 *
 * There's also a colpush mixin to shift an element to the right by a number of columns.
 *
 * code:
 *   @include gridContainer ([$gutter]);
 *   @include subgridContainer ([$gutter]);
 *   @include colspan ($span[, $total[, $gutter]]);
 *   @include colpush ($span[, $total[, $gutter]]);
 *
 * @param {number} $span - number of columns to span
 * @param {number, optional} $total - number of total columns the grid has
 * @param {number, optional} $gutter - width of the gutters between columns
 */
/*
* Hide only visually, but have it available for screen readers:
* http://snook.ca/archives/html_and_css/hiding-content-for-accessibility
*/
.visuallyhidden {
	border: 0;
	clip: rect(0 0 0 0);
	height: 1px;
	margin: -1px;
	overflow: hidden;
	padding: 0;
	position: absolute;
	width: 1px;
	/*
  * Extends the .visuallyhidden class to allow the element
  * to be focusable when navigated to via the keyboard:
  * https://www.drupal.org/node/897638
  */ }
	.visuallyhidden.focusable:focus, .visuallyhidden.focusable:active {
		clip: auto;
		height: auto;
		margin: 0;
		overflow: visible;
		position: static;
		width: auto; }

*, *::before, *::after {
	-webkit-box-sizing: inherit;
	        box-sizing: inherit; }

/***
 * Settings
 *
 * Global settings and variables. This defines global site wide things like
 * colors and fonts.
 */
/***
 *  Type Scale mixins
 *
 *  Sass mixins for setting font-size and line-height.
 *
 *  code:
 *    @include h1;
 *    @include h2;
 *    @include h3;
 *    @include h4;
 *    @include body;
 *    @include small;
 */
/***
 * Quarks
 *
 * Element level styles meant to apply globally.  These define what elements look like if no class is applied to them.  Effectively our site specific _normalize.css_.
 * > Note that these files contain only the default styles for these elements, not modified elements. For example, if we have a table that looks and works entirely differently from the default tables used throughout the website, it would not be a quark.
 * >
 * >\- http://www.smashingmagazine.com/2013/08/other-interface-atomic-design-sass/
 */
html {
	padding: 0;
	margin: 0;
	-webkit-font-smoothing: antialiased;
	-moz-osx-font-smoothing: grayscale; }

body {
	font-family: "Quattrocento";
	letter-spacing: 0.2em;
	font-size: 1rem;
	line-height: 1.5;
	font-weight: 300;
	margin: 0;
	padding: 0;
	background: #000;
	color: #827F73; }

/***
 * Typography
 *
 * Default text styles.
 *
 * html:
 *   <h1>Heading Level 1</h1>
 *   <h2>Heading Level 2</h2>
 *   <h3>Heading Level 3</h3>
 *   <h4>Heading Level 4</h4>
 *   <p>Unde quo, minus eaque eligendi cum tempore, nulla, accusamus est labore tenetur modi eveniet obcaecati voluptas eius vitae vero dolorem nobis culpa nihil. Itaque saepe suscipit odit fugit quidem culpa.</p>
 *   <p>Accusantium recusandae, dignissimos rerum quaerat voluptatem quis itaque deleniti sequi autem explicabo dolore delectus, doloremque eos. Accusantium<sup>sup</sup> recusandae<sub>sub</sub> eius, debitis voluptates adipisci aspernatur rem voluptatum, delectus, tempore accusantium dolorum cumque error.</p>
 */
h1, .h1 {
	font-size: var(--h1-size);
	line-height: 1;
	font-family: "Quattrocento";
	letter-spacing: 0.333em;
	margin: 4rem auto 3rem;
	color: var(--headline-color); }

h2, .h2 {
	font-size: var(--h2-size);
	line-height: 1.1;
	font-family: "Quattrocento";
	letter-spacing: 0.333em;
	margin: 3rem auto 2rem;
	color: var(--headline-color); }

h3, .h3 {
	font-size: var(--h3-size);
	line-height: 1.1;
	font-family: "Quattrocento";
	letter-spacing: 0.333em;
	margin: 2rem auto 1rem;
	color: var(--headline-color); }

h4, .h4 {
	font-size: var(--h4-size);
	line-height: 1.1;
	font-family: "Quattrocento";
	letter-spacing: 0.333em;
	margin: 1rem auto; }

.directions {
	font-size: 0.8125rem;
	margin-top: 0; }

p {
	margin: 1rem auto; }

strong {
	font-weight: 700; }

/***
 * Links
 *
 * Markup:
 *   <p>Here's something that's fun. Get away from those little Christmas tree things we used to make in school. We'll take a little bit of <a href="#">Van Dyke Brown</a>. This is gonna be a happy little seascape. We tell people sometimes: we're like drug dealers, <a href="#">come into town</a> and get everybody absolutely addicted to painting. It doesn't take much to get you addicted.</p>
 */
a {
	color: #af9862;
	-webkit-transition: color 0.15s;
	transition: color 0.15s;
	text-decoration: none;
	font-weight: 700; }

img {
	display: inline-block;
	max-width: 100%;
	border: none; }

/**
 * Hide the overflow in IE.
 */
svg:not(:root) {
	overflow: hidden; }

[src$='svg'] {
	width: auto;
	height: auto; }

/***
 * Horizontal Rule
 *
 * Markup:
 *   <hr>
 */
hr {
	display: block;
	width: auto;
	margin: 3rem 3rem;
	border: none;
	height: 1px;
	background: #fff; }
	@media only screen and (min-width: 45.625em) {
		hr {
			margin: 3rem 6rem; } }

/***
 *  Lists
 *
 *  html:
 *    <ul>
 *      <li>Lorem ipsum dolor sit amet</li>
 *      <li>Minima recusandae adipisci quidem</li>
 *      <li>Amet eum non animi soluta</li>
 *      <li>Saepe commodi nesciunt quaerat quae minima</li>
 *    </ul>
 *    <ol>
 *      <li>Lorem ipsum dolor sit amet</li>
 *      <li>Minima recusandae adipisci quidem</li>
 *      <li>Amet eum non animi soluta</li>
 *      <li>Saepe commodi nesciunt quaerat quae minima</li>
 *    </ol>
 */
ul, ol {
	margin: 2rem 0;
	padding-left: 2rem; }

li {
	margin: 1rem 0; }

fieldset {
	border: none;
	padding: 1rem 1rem; }
	fieldset > :first-child {
		margin-top: 0; }
	fieldset > :last-child {
		margin-bottom: 0; }

input {
	font-family: var(--input-font); }

/***
 * Atoms
 *
 * These are the smallest level of styles that merit a class.  Examples are buttons, icons, and text variations like disclaimers.
 * > The styles in an atom should almost never be attached to an HTML element itself; we might not be able to guarantee what the markup will look like in the future. Specifying a class instead is always safer.
 * >
 * >\- http://www.smashingmagazine.com/2013/08/other-interface-atomic-design-sass/
 */
/***
 * Molecules
 *
 * Structures which combine multiple elements to create a coherent piece. A masthead with an image and headline, or a nav dropdown containing numerous links, for example.
 * > This is where we can combine multiple quarks and atoms, without interfering with any of our global styles.
 * >
 * >\- http://www.smashingmagazine.com/2013/08/other-interface-atomic-design-sass/
 */
.class-card {
	margin: 1.5625rem;
	position: relative;
	width: 19.0625rem;
	height: 43.75rem;
	-ms-flex-negative: 0;
	    flex-shrink: 0;
	display: -webkit-box;
	display: -ms-flexbox;
	display: flex;
	-webkit-box-orient: vertical;
	-webkit-box-direction: normal;
	    -ms-flex-direction: column;
	        flex-direction: column;
	-webkit-box-pack: end;
	    -ms-flex-pack: end;
	        justify-content: flex-end;
	-webkit-box-align: stretch;
	    -ms-flex-align: stretch;
	        align-items: stretch;
	text-transform: uppercase;
	color: #827F73;
	line-height: 1;
	text-align: center;
	-webkit-transition: -webkit-transform 0.5s cubic-bezier(0.07, 0.24, 0.33, 0.99);
	transition: -webkit-transform 0.5s cubic-bezier(0.07, 0.24, 0.33, 0.99);
	transition: transform 0.5s cubic-bezier(0.07, 0.24, 0.33, 0.99);
	transition: transform 0.5s cubic-bezier(0.07, 0.24, 0.33, 0.99), -webkit-transform 0.5s cubic-bezier(0.07, 0.24, 0.33, 0.99); }
	.class-card__portrait-box {
		display: -webkit-box;
		display: -ms-flexbox;
		display: flex;
		-webkit-box-align: end;
		    -ms-flex-align: end;
		        align-items: flex-end;
		-webkit-box-pack: center;
		    -ms-flex-pack: center;
		        justify-content: center;
		width: 100%;
		margin: 0 auto;
		position: relative;
		z-index: 30;
		-webkit-box-flex: 1;
		    -ms-flex-positive: 1;
		        flex-grow: 1;
		overflow: hidden; }
		.class-card:hover .class-card__portrait-box, .class-card.is-active .class-card__portrait-box {
			background: url("../images/hash-sm.gif") repeat-x top left; }
	.class-card__name, .class-card__item {
		display: -webkit-box;
		display: -ms-flexbox;
		display: flex;
		-webkit-box-align: center;
		    -ms-flex-align: center;
		        align-items: center;
		-webkit-box-pack: center;
		    -ms-flex-pack: center;
		        justify-content: center;
		z-index: 30; }
	.class-card__name {
		font-family: "Quattrocento";
		letter-spacing: 0.333em;
		position: relative;
		font-size: 1.5rem;
		height: 4.3125rem;
		margin-bottom: 0.25rem;
		color: #af9862;
		background: url("../images/hash-sm.png") repeat-x top left; }
		.class-card__name::after {
			content: '.';
			margin-left: -.2em; }
		.class-card__name::before {
			content: '';
			opacity: 0;
			position: absolute;
			top: 0;
			right: 0;
			bottom: 0;
			left: 0;
			background: url("../images/class-select-nameplate-active.png") no-repeat center center;
			background-size: 100% 100%;
			-webkit-transition: opacity 0.1666s ease-in-out;
			transition: opacity 0.1666s ease-in-out; }
		.class-card:hover .class-card__name, .class-card.is-active .class-card__name {
			color: #fff;
			background: url("../images/hash-sm.gif") repeat-x top left; }
			.class-card:hover .class-card__name::before, .class-card.is-active .class-card__name::before {
				opacity: 1; }
	.class-card__item {
		height: 2.5rem; }
	.class-card__frame-canvas {
		-webkit-transition: opacity 0.5s;
		transition: opacity 0.5s;
		position: absolute;
		top: -0.9375rem;
		left: -1.4375rem; }
	.class-card__greeble {
		position: absolute;
		z-index: 1;
		-webkit-animation: greeble 4000ms linear infinite;
		        animation: greeble 4000ms linear infinite;
		display: none;
		opacity: 0; }
		.class-card__greeble--tr {
			top: -1.5625rem;
			left: 45%; }
		.class-card__greeble--bl1 {
			left: -2.8125rem;
			bottom: 1.875rem;
			-webkit-animation-delay: .2s;
			        animation-delay: .2s; }
		.class-card__greeble--bl2 {
			left: 0.9375rem;
			bottom: -1.875rem;
			-webkit-animation-delay: .5s;
			        animation-delay: .5s; }
		.class-card.is-active .class-card__greeble {
			display: block; }
	.class-card::before {
		content: '';
		position: absolute;
		z-index: 10;
		top: 0;
		right: 0;
		bottom: 0;
		left: 0;
		background: black url("../images/class-select-bg.jpg") no-repeat center center;
		background-size: 100% 100%;
		pointer-events: none; }
	.class-card::after {
		content: '';
		position: absolute;
		z-index: 100;
		top: -0.9375rem;
		left: -1.4375rem;
		width: 119.01639%;
		height: 104.14286%;
		background: url("../images/class-select-frame.png") no-repeat left top;
		background-size: 100%;
		pointer-events: none; }
	.class-card .clouded-canvas {
		display: block;
		position: absolute;
		top: -3.9375rem;
		left: -2.75rem; }
	.class-card.is-shifted {
		-webkit-transform: translateX(30%);
		        transform: translateX(30%); }
	.class-card.is-active {
		-webkit-transform: scale(1.05);
		        transform: scale(1.05); }

@-webkit-keyframes greeble {
	0% {
		opacity: 0;
		-webkit-transform: translateX(0);
		        transform: translateX(0); }
	5% {
		opacity: 1; }
	20% {
		opacity: 1; }
	22.5% {
		opacity: .7; }
	25% {
		opacity: 1; }
	30% {
		opacity: 1; }
	31.75% {
		opacity: .7; }
	33.5% {
		opacity: 1; }
	45% {
		opacity: 1; }
	47.5% {
		opacity: .7; }
	50% {
		opacity: 1; }
	60% {
		opacity: 1; }
	62.5% {
		opacity: .7; }
	67.5% {
		opacity: 1; }
	82.5% {
		opacity: 1; }
	85% {
		opacity: .7; }
	87.5% {
		opacity: 1; }
	89.25% {
		opacity: .7; }
	91% {
		opacity: 1; }
	95% {
		opacity: 1; }
	100% {
		opacity: 0;
		-webkit-transform: translateX(40px);
		        transform: translateX(40px); } }

@keyframes greeble {
	0% {
		opacity: 0;
		-webkit-transform: translateX(0);
		        transform: translateX(0); }
	5% {
		opacity: 1; }
	20% {
		opacity: 1; }
	22.5% {
		opacity: .7; }
	25% {
		opacity: 1; }
	30% {
		opacity: 1; }
	31.75% {
		opacity: .7; }
	33.5% {
		opacity: 1; }
	45% {
		opacity: 1; }
	47.5% {
		opacity: .7; }
	50% {
		opacity: 1; }
	60% {
		opacity: 1; }
	62.5% {
		opacity: .7; }
	67.5% {
		opacity: 1; }
	82.5% {
		opacity: 1; }
	85% {
		opacity: .7; }
	87.5% {
		opacity: 1; }
	89.25% {
		opacity: .7; }
	91% {
		opacity: 1; }
	95% {
		opacity: 1; }
	100% {
		opacity: 0;
		-webkit-transform: translateX(40px);
		        transform: translateX(40px); } }

/***
 * Organisms
 *
 * These are big things that combine everything smaller.  An entire form containing molecules of labels with inputs, or the global site header, for example.
 * > Organisms are groups of molecules joined together to form a relatively complex, distinct section of an interface.
 * >
 * >\- http://bradfrost.com/blog/post/atomic-web-design/#organisms
 */
.class-select-screen {
	display: -webkit-box;
	display: -ms-flexbox;
	display: flex;
	-webkit-box-orient: horizontal;
	-webkit-box-direction: normal;
	    -ms-flex-direction: row;
	        flex-direction: row;
	padding: 3.125rem; }

/**
 * Extras
 */
/**
 * themes
 */

/*# sourceMappingURL=data:application/json;charset=utf8;base64, */
