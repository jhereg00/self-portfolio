// Divided Content
//
// Content divided by a line.
// Each side is optional.
//
// .yay-nay - good/bad colorizing
//
// Markup:
//   <div class="content-divided {{ modifier }}">
//     <div class="content-divided__left">
//       <h3>Fluff this Cloud</h3>
//       <p>The man who does the best job is the one who is happy at his job. If you do too much it's going to lose its effectiveness. Decide where your cloud lives. Maybe he lives right in here. A thin paint will stick to a thick paint.</p>
//     </div>
//     <div class="content-divided__right">
//       <p>I sincerely wish for you every possible joy life could bring. Painting should do one thing. It should put happiness in your heart. Every time you practice, you learn more.</p>
//     </div>
//   </div>
//   <div class="content-divided {{ modifier }}">
//     <div class="content-divided__right">
//       <p>I sincerely wish for you every possible joy life could bring. Painting should do one thing. It should put happiness in your heart. Every time you practice, you learn more.</p>
//     </div>
//   </div>
//   <div class="content-divided {{ modifier }}">
//     <div class="content-divided__left">
//       <h3>Fluff this Cloud</h3>
//       <p>The man who does the best job is the one who is happy at his job. If you do too much it's going to lose its effectiveness. Decide where your cloud lives. Maybe he lives right in here. A thin paint will stick to a thick paint.</p>
//     </div>
//   </div>
//
// Styleguide 4.1
$gutter: $wr * 4;
.content-divided {
  @include subgridContainer ($gutter);
  position: relative;
  margin-top: $vr * 6;
  padding: 0 0 $vr * 4 0;
  //overflow: hidden; // to clear floats without the normal .clear-fix approach of using an ::after
  & + & {
    margin-top: 0;
  }

  :first-child {
    // put the pseudo elements on the child so it doesn't disrupt the clear-fix
    &::before {
      // dot (or icon in other versions)
      content: '';
      display: block;
      position: absolute;
      top: $vr;
      //left: 0;
      left: $gutter / 2 + $vr / 2;
      width: $vr; height: $vr;
      margin: $vr * -.5;
      box-sizing: border-box;
      border: 2px solid $white;
      border-radius: 50%;
    }
    &::after {
      // line
      content: '';
      display: block;
      position: absolute;
      top: $vr * 2;
      //left: 0;
      left: $gutter / 2 + $vr / 2;
      bottom: 0;
      width: 1px;
      background: $white;
    }
    @include mq ($bp-large) {
      &::before, &::after {
        left: 50%;
      }
    }
  }

  // fade out line
  &:last-child :first-child {
    &::after {
      background: linear-gradient(to top, transparent, $white #{$vr * 20});
    }
  }

  &.yay-nay {
    .content-divided__left .h4 {
      color: $accent;
    }
    .content-divided__right .h4 {
      color: $light;
    }
  }
}
.content-divided__left, .content-divided__right {
  @include colspan (12,12,$gutter);
  padding-left: $wr * 2;
  margin-bottom: $vr * 2;

  :first-child {
    margin-top: 0;
  }

  @include mq ($bp-large) {
    @include colspan (1,2,$gutter);
    padding-left: 0;
  }
}
.content-divided__left {
  @include mq ($bp-large) {
    text-align: right;
  }
}
.content-divided__right {
  @include mq ($bp-large) {
    float: right;
  }
}
